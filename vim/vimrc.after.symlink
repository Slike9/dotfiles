" .vimrc.after is loaded after the plugins have loaded

" My settings

" Перемещаемся построчно по тексту который не поместился в строке
nmap j gj
nmap k gk

syntax enable          " Включить подсветку синтаксиса
set t_Co=256           " Использовать 256 цветов
set background=dark    " Установить темный фон
"colorscheme solarized  " Установить цветовую схему
"colorscheme desert
"colorscheme jellybeans
"colorscheme gruvbox
"colorscheme darktango
"colorscheme inkpot
"colorscheme iceberg
"colorscheme hemisu
"colorscheme hybrid
"colorscheme codeschool
"colorscheme BusyBee
"colorscheme railscasts2
"colorscheme lucius
colorscheme milk-and-tea

set nocompatible
filetype plugin indent on
syntax on

"filetype plugin on
au FileType coffee filetype indent off

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

set nu                 " Включить номера строк
"set relativenumber

" Поиск
set hlsearch           " Подсветка
set incsearch          " Поиск во время набора
set ignorecase         " Игнорировать регистр
set smartcase          " Учитывать регистр только если он есть
set nowrapscan
nnoremap <silent> // :nohlsearch<CR>

" Предлагать все варианты при автодополнении в строке команд
set wildmenu
set wildmode=list:longest,full

" Перемещать окно если мы находимся за 5 строк до конца и 3 символа
" вправо-влево
set scrolljump=5
set scrolloff=3

" Подсвечивать нежелательное пустое пространство
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

" Перемещаемся по окнам быстрее
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

set wrap               " Перенос длинных строк

" Автоматически перемещать курсор на величину отступа после
" открытия блока кода
set autoindent
set foldenable         " Автоматическое форматирование кода

set autowriteall
set hidden

" Передвижение блоков когда по отступам в визуальном режиме
vnoremap < <gv
vnoremap > >gv

" Если забыли sudo
cmap w!! w !sudo tee % >/dev/null


" Открыть строку в гитлабе
" MacOS
" nnoremap <leader>og :!echo `git ghurl`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>

" Linux chromium
nnoremap <leader>ou :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs chromium-browser<CR><CR>

imap jk <ESC>
noremap <C-S> :w<CR>
inoremap <C-S> <ESC>:w<CR>
imap <C-b> <left>
imap <C-f> <right>

" line move
nnoremap <C-j> :m .+1<CR>
nnoremap <C-k> :m .-2<CR>

" syntastic
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=0
let g:syntastic_auto_loc_list=2

" NERDTree
nnoremap <silent> <F2> :NERDTreeToggle<CR>
nnoremap <silent> <M-F1> :NERDTreeFind<CR>
nnoremap <leader>tf :NERDTreeFind<CR>

" BuffExplorer
nnoremap <silent> <M-F12> :BufExplorer<CR>
nnoremap <silent> <C-b> :BufExplorer<CR>
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <S-F12> :bp<CR>
nnoremap <C-M-Right> :bn<CR>
nnoremap <C-M-Left> :bp<CR>
nnoremap <leader>bb :b#<CR>

"ControlP
let g:ctrlp_map = ''
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
  \ }
nnoremap <leader>. :CtrlPTag<cr>

" Tabs
nnoremap <silent> <M-Left> :tabprevious<CR>
nnoremap <silent> <M-Right> :tabnext<CR>

" fugitive
nmap <leader>gb :Gblame<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gl :Glog<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Git push<CR>

" Gundo
nmap <F5> :GundoToggle<CR>
imap <F5> <ESC>:GundoToggle<CR>

" NERDCommenter

" Buffers
vnoremap <C-c> "+ygv"*y
inoremap <C-v> <ESC>"+pa

" grep
nnoremap <leader>fw :Ag <C-R><C-W><CR>

" AutoClose
" ruby files
autocmd FileType ruby
        \ let b:AutoClosePairs = AutoClose#DefaultPairsModified("|", "")
" clojure
autocmd FileType clojure
        \ let b:AutoClosePairs = AutoClose#DefaultPairsModified("", "'`")

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clojure
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:clojure_highlight_references = 1

"fireplace.vim
"map <C-e> :Eval<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell cheking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
setlocal spell spelllang=ru_ru,en_us
"setlocal spell spelllang=ru_yo,en_us
"set spell

" Vim и кириллица - XkbSwitch (не удалось завести под Linux)
"let g:XkbSwitchEnabled = 1
"let g:XkbSwitchLib = '/usr/local/lib/libxkbswitch.so'
"let g:XkbSwitchIMappings = ['ru']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim и кириллица
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabular
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
  nmap <Leader>a<bar> :Tabularize /<bar><CR>
  vmap <Leader>a<bar> :Tabularize /<bar><CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ruby-xmpfilter
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType ruby nmap <buffer> <leader>xm <Plug>(xmpfilter-mark)
autocmd FileType ruby xmap <buffer> <leader>xm <Plug>(xmpfilter-mark)
autocmd FileType ruby imap <buffer> <leader>xm <Plug>(xmpfilter-mark)

autocmd FileType ruby nmap <buffer> <leader>xr <Plug>(xmpfilter-run)
autocmd FileType ruby xmap <buffer> <leader>xr <Plug>(xmpfilter-run)
autocmd FileType ruby imap <buffer> <leader>xr <Plug>(xmpfilter-run)

" vim-rspec
let g:rspec_command = "Dispatch bin/rspec {spec}"
nnoremap <Leader>sf :call RunCurrentSpecFile()<CR>
nnoremap <Leader>sn :call RunNearestSpec()<CR>
nnoremap <Leader>sl :call RunLastSpec()<CR>
nnoremap <Leader>sa :call RunAllSpecs()<CR>
