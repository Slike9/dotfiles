#!/usr/bin/env bash

# Usage:
# gff -d -r master -v @user1 @user2

set -e
set -u

if [[ $1 == '-h' || $1 == '--help' ]]; then
  echo "Usage: "
  echo "  gff -d -r master -v @user1 @user2"
  exit
fi

release_branch=master
pr_reviewers="@a.mikka @n.babushkin"
deploy=false

while getopts r:dv: opt; do
  case $opt in
    r)
      release_branch=$OPTARG
      ;;
    d)
      deploy=true
      ;;
    v)
      pr_reviewers=$OPTARG
      ;;
  esac
done

echo "release branch: $release_branch"
echo "pr reviewers: $pr_reviewers"

#default_release_branch=master
#pr_reviewers="@a.mikka @s.budaev @n.babushkin @s.savelyeva"

#release_branch=$1
#release_branch=${release_branch:-$default_release_branch}

function check_changes {
  if [[ `git status -s | wc -l` -gt 0 ]]
  then
    echo "There are uncommited changes!!!"
    echo "exiting..."
    exit
  fi
}

function current_branch {
  echo $(git rev-parse --abbrev-ref HEAD)
}

step_number=0

function next_step {
  step_name=$1
  let ++step_number
  echo "$step_number. $step_name"
}

next_step "check_changes"
check_changes

branch=$(current_branch)

next_step "push the feature branch $branch"
git put

next_step "send PR $branch -> $release_branch to $pr_reviewers"
stash_log_file=$(mktemp)
stash pull-request $release_branch $pr_reviewers | tee $stash_log_file
pr_url=$(grep pull-requests $stash_log_file | tail -1)
rm $stash_log_file
[[ -n $pr_url ]] && sensible-browser $pr_url

exit

if ! $deploy; then
  exit
fi

next_step "merge feature branch to staging"
git checkout staging
git pull
git merge --no-edit $branch

next_step "push staging"
git put

next_step "deploy staging"
bundle exec cap staging deploy -s branch=staging
