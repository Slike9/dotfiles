" vim: set ft=vim
" .vimrc.after is loaded after the plugins have loaded

set rtp+=~/.my_vim

" Перемещаемся построчно по тексту который не поместился в строке
nmap j gj
nmap k gk

syntax enable          " Включить подсветку синтаксиса
set t_Co=256           " Использовать 256 цветов
"set background=dark    " Установить темный фон
"colorscheme milk-and-tea
set background=light    " Установить светлый фон
colorscheme solarized

set nocompatible
filetype plugin indent on
syntax on

"filetype plugin on
au FileType coffee filetype indent off

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Display extra whitespace
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.
set list

" Use one space, not two, after punctuation.
set nojoinspaces

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Make it obvious where 80 characters is
"set textwidth=80
"set colorcolumn=+1

" Numbers
set number
"set numberwidth=5
"set relativenumber

" Search
set hlsearch           " Подсветка
set incsearch          " Поиск во время набора
set ignorecase         " Игнорировать регистр
set smartcase          " Учитывать регистр только если он есть
"set nowrapscan        " Searches wrap around the end of the file.
nnoremap <silent> // :nohlsearch<CR>
" Search for visually selected text
vnoremap // y/\V<C-R>"<CR>

let g:incsearch#auto_nohlsearch = 1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Предлагать все варианты при автодополнении в строке команд
set wildmenu
set wildmode=list:longest,full

" Перемещать окно если мы находимся за 5 строк до конца и 3 символа
" вправо-влево
set scrolljump=5
set scrolloff=3

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

set wrap               " Перенос длинных строк

" Автоматически перемещать курсор на величину отступа после
" открытия блока кода
set autoindent
set foldenable         " Автоматическое форматирование кода

set autowriteall
set hidden

" reload .vimrc
map <leader>vr :source $MYVIMRC<CR>
map <leader>ve :e ~/.vimrc.after<CR>
map <leader>vb :e ~/.vimrc.bundles<CR>

" Передвижение блоков когда по отступам в визуальном режиме
vnoremap < <gv
vnoremap > >gv

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" Some helpers to edit mode
" http://vimcasts.org/e/14
nmap <leader>ew :e <C-R>=expand('%:h').'/'<cr>
nmap <leader>es :sp <C-R>=expand('%:h').'/'<cr>
nmap <leader>ev :vsp <C-R>=expand('%:h').'/'<cr>
nmap <leader>et :tabe <C-R>=expand('%:h').'/'<cr>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Если забыли sudo
cmap w!! w !sudo tee % >/dev/null

" Открыть строку в гитлабе
" MacOS
" nnoremap <leader>og :!echo `git ghurl`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>

" Linux browser
nnoremap <leader>ou :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs sensible-browser<CR><CR>
"nnoremap <leader>os :!echo `git surl`/%?at=`git rev-parse --symbolic-full-name HEAD`\#<C-R>=line('.')<CR> \| xargs sensible-browser<CR><CR>

" Navigation in command line
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>

" Saving
nnoremap <leader>w :w<CR>
vnoremap <leader>w <Esc>:w<CR>

inoremap <C-b> <left>
inoremap <C-f> <right>

" quickfix list movement
nmap <silent><Leader>qj :cnext<CR>
nmap <silent><Leader>qk :cprev<CR>
nmap <silent><Leader>qq :cclose<CR>

" paste current file name with current line
nnoremap <leader>yp :let @+=expand("%") . ":" . line(".")<CR>

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

let g:syntastic_enable_signs=1
let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_auto_loc_list=2

" NERDTree
nnoremap <silent> <F2> :NERDTreeToggle<CR>
nnoremap <silent> <M-F1> :NERDTreeFind<CR>
nnoremap <leader>tf :NERDTreeFind<CR>

" BuffExplorer
nnoremap <silent> <M-F12> :BufExplorer<CR>
nnoremap <silent> <C-b> :BufExplorer<CR>

" Buffers
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <S-F12> :bp<CR>
nnoremap <C-M-Right> :bn<CR>
nnoremap <C-M-Left> :bp<CR>
nnoremap <silent> <leader>bb :b#<CR>
nnoremap <silent> <leader>bn :bn<CR>
nnoremap <silent> <leader>bp :bp<CR>

" ctrlp
nnoremap <leader>. :CtrlPTag<cr>

" Tabs
nnoremap <silent> <M-Left> :tabprevious<CR>
nnoremap <silent> <M-Right> :tabnext<CR>

" fugitive
nmap <leader>gb :Gblame<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gl :Glog<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Git push<CR>

" EasyMotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1 " Turn on case insensitive feature
nmap s <Plug>(easymotion-s)
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
"nmap <Leader>s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
map <Leader>s <Plug>(easymotion-s)
nmap <Leader>s <Plug>(easymotion-overwin-f2)
map f <Plug>(easymotion-fl)
map F <Plug>(easymotion-Fl)
map t <Plug>(easymotion-tl)
map T <Plug>(easymotion-Tl)
map  <Leader>/ <Plug>(easymotion-sn)
omap <Leader>/ <Plug>(easymotion-tn)
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Gundo
nmap <F5> :GundoToggle<CR>
imap <F5> <ESC>:GundoToggle<CR>

" NERDCommenter

" Buffers
vnoremap <C-c> "+ygv"*y
inoremap <C-v> <ESC>"+pa

" grep
nnoremap <silent> <leader>fw :grep -w <C-R><C-W><CR>:cw<CR>
vnoremap <silent> <leader>fw y:grep "<C-R>""<CR>:cw<CR>

" AutoClose
" ruby files
autocmd FileType ruby
        \ let b:AutoClosePairs = AutoClose#DefaultPairsModified("|", "")
" clojure
autocmd FileType clojure
        \ let b:AutoClosePairs = AutoClose#DefaultPairsModified("", "'`")

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clojure
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:clojure_highlight_references = 1

"fireplace.vim
"map <C-e> :Eval<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell cheking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
setlocal spell spelllang=ru_ru,en_us
"setlocal spell spelllang=ru_yo,en_us
"set spell

" Vim и кириллица - XkbSwitch (не удалось завести под Linux)
"let g:XkbSwitchEnabled = 1
"let g:XkbSwitchLib = '/usr/local/lib/libxkbswitch.so'
"let g:XkbSwitchIMappings = ['ru']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim и кириллица
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabular
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
  nmap <Leader>a<bar> :Tabularize /<bar><CR>
  vmap <Leader>a<bar> :Tabularize /<bar><CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ruby-xmpfilter
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup xmpfilterGroup
  autocmd!
  autocmd FileType ruby nmap <buffer> <leader>xm <Plug>(xmpfilter-mark)
  autocmd FileType ruby xmap <buffer> <leader>xm <Plug>(xmpfilter-mark)

  autocmd FileType ruby nmap <buffer> <leader>xr <Plug>(xmpfilter-run)
  autocmd FileType ruby xmap <buffer> <leader>xr <Plug>(xmpfilter-run)
augroup END

" vim-rspec
if filereadable("bin/rspec")
  let g:rspec_command = "Dispatch bin/rspec {spec}"
else
  let g:rspec_command = "Dispatch bundle exec rspec {spec}"
endif
nnoremap <Leader>sf :call RunCurrentSpecFile()<CR>
nnoremap <Leader>sn :call RunNearestSpec()<CR>
nnoremap <Leader>sl :call RunLastSpec()<CR>
nnoremap <Leader>sa :call RunAllSpecs()<CR>

" vim-run-interactive
nnoremap <leader>ri :RunInInteractiveShell<space>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree (from https://github.com/carlhuda/janus/blob/master/janus%2Fvim%2Ftools%2Fjanus%2Fafter%2Fplugin%2Fnerdtree.vim)
augroup AuNERDTreeCmd
  autocmd!
  autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
  autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()
augroup END

" If the parameter is a directory, cd into it
function! s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function! s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" templates
augroup templates
  autocmd!
  autocmd BufNewFile *.rb 0r ~/.my_vim/templates/skeleton.rb
augroup end
